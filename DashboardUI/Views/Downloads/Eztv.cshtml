@model IEnumerable<SDNMediaModels.Api.EztvResult>

@{
    ViewBag.Title = "Eztv Downloads ";

    if (!string.IsNullOrEmpty(ViewBag.DownloadFileName))
    {

        if (ViewBag.DownloadActionStatus == "successful")
        {
            <div class="alert alert-success" style="text-align: center;" role="alert">
                <a href="#" class="close text-sm-right align-text-top" style="text-decoration: none;" data-dismiss="alert" aria-label="close">x</a>
                Automation has @(ViewBag.DownloadActionStatus)ly processed action <b>@(ViewBag.DownloadMethod)</b>: "@(ViewBag.DownloadFileName)" - [@Html.ActionLink("Check Status", "Automation", new { Id = ViewBag.DownloadQueueId })]
            </div>
        }

        if (ViewBag.DownloadActionStatus == "unsuccessful")
        {
            <div class="alert alert-danger" style="text-align: center;" role="alert">
                <a href="#" class="close text-sm-right align-text-top" style="text-decoration: none;" data-dismiss="alert" aria-label="close">x</a>
                Automation has @(ViewBag.DownloadActionStatus)ly processed action <b>@(ViewBag.DownloadMethod)</b>: "@(ViewBag.DownloadFileName)" - Please try again.
            </div>
        }

    }
}
<h2 style="text-align: center;">Eztv Torrent Download Feed</h2>
<table class="table table-hover table-dark table-bordered">
    <tr style="background-color: #2e2d2d">
        <th>
            @Html.DisplayNameFor(model => model.title)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.imdb_id)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.season)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.episode)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.seeds)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.date_released_unix)
        </th>
        <th style="text-align: center;">
            @Html.DisplayNameFor(model => model.size_bytes) (in MB)
        </th>
        <th style="text-align: center;">
            Automation Actions
        </th>
    </tr>


    @foreach (var item in Model)
    {
        int.TryParse(item.season, out int seasonNum);

        if (seasonNum != 0)
        {
            <tr>
                <td style="border-collapse: collapse; border: 1px solid gray;">
                    @Html.DisplayFor(modelItem => item.title)
                </td>
                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @Html.DisplayFor(modelItem => item.imdb_id)
                </td>
                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @Html.DisplayFor(modelItem => item.season)
                </td>
                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @Html.DisplayFor(modelItem => item.episode)
                </td>
                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @Html.DisplayFor(modelItem => item.seeds)
                </td>
                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @{
                        var displayTime = DateTimeOffset.FromUnixTimeSeconds(item.date_released_unix).DateTime.ToString("MMMM dd, yyyy HH:mm:ss");

                    }

                    @Html.DisplayFor(modelItem => displayTime)
                </td>

                @{
                    bool woo = Double.TryParse(item.size_bytes, out double size);
                }

                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    @(Math.Round(((size / 1024) / 1024), 2))
                </td>

                <td style="border-collapse: collapse; border: 1px solid gray; text-align: center;">
                    <form method="post" action="@Url.Action("","", item)">
                        <input type="button" class="btn-xs btn-primary" style="float: left;" value="AutoDL" />
                    </form>
                    <form method="post" action="@Url.Action("AutoEztvQueueDownload", "Downloads")">
                        <input type="hidden" value="@item.torrent_url" name="downloadUrl" />
                        <input type="hidden" value="@item.filename" name="downloadFileName" />
                        <input type="hidden" value="AutoQueueEztvDownload" name="downloadMethod" />
                        <input type="submit" class="btn-xs btn-outline-info" style="float: left;" value="Queue" />
                    </form>
                    <form method="post" action="@Url.Action("", "", item)">
                        <input type="hidden" value="@item.filename" name="downloadFileName" />
                        <input type="button" class="btn-xs btn-outline-success" style="float: right;" value="Track" />
                    </form>
                </td>
            </tr>
        }
    }
</table>
